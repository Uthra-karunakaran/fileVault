<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>FileVault</title>
    <link rel="icon" type="image/png" href="/css/folder.png" />
    <link href="/css/style.css" rel="stylesheet" />
  </head>
  <body class="main">
    <%- include(headerNav) %>
    <div class="content body-class"><%- include(body) %></div>
    <%- include('footer.ejs') %>
    <!-- Folder Modal -->
    <div id="folderModal" class="modalStyle clsHidden">
      <div class="modalDiv">
        <div class="modalMainDiv">
          <div class="modalHeader">
            <h3 class="modalFontStyle" id="folder-modal-title">
              Create Folder
            </h3>
            <button class="modalCloaseBtn" onclick="closeModal('folderModal')">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="30"
                height="30"
                fill="currentColor"
                class="bi bi-x"
                viewBox="0 0 16 16"
              >
                <path
                  d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708"
                />
              </svg>
            </button>
          </div>
          <div class="modalForm--div">
            <form class="modalForm" id="folder-form" method="POST">
              <label for="folderName" class="modalLable">Folder Name</label>
              <input
                type="text"
                name="folderName"
                id="folderName"
                class="modalInput"
                value="new folder"
                required
              />
              <div class="mt-4 flex justify-end">
                <button type="submit" class="library-btn">Create</button>
                <button
                  type="button"
                  onclick="closeModal('folderModal')"
                  class="modalCancelBtn"
                >
                  Cancel
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>

    <!-- File Modal -->
    <div id="fileModal" class="modalStyle clsHidden">
      <div class="modalDiv">
        <div class="modalMainDiv">
          <div class="modalHeader">
            <h3 class="modalFontStyle" id="file-modal-title">Upload File</h3>
            <button class="modalCloaseBtn" onclick="closeModal('fileModal')">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="30"
                height="30"
                fill="currentColor"
                class="bi bi-x"
                viewBox="0 0 16 16"
              >
                <path
                  d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708"
                />
              </svg>
            </button>
          </div>
          <div class="modalForm--div">
            <form
              id="file-form"
              onsubmit="return false;"
              method="POST"
              class="modalForm"
              enctype="multipart/form-data"
              action=""
            >
              <div id="errorMessages"></div>
              <!-- Error message placeholder -->
              <label for="fileInput" class="fileInput__label">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="70"
                  height="70"
                  fill="currentColor"
                  class="bi bi-cloud-upload"
                  viewBox="0 0 16 16"
                >
                  <path
                    fill-rule="evenodd"
                    d="M4.406 1.342A5.53 5.53 0 0 1 8 0c2.69 0 4.923 2 5.166 4.579C14.758 4.804 16 6.137 16 7.773 16 9.569 14.502 11 12.687 11H10a.5.5 0 0 1 0-1h2.688C13.979 10 15 8.988 15 7.773c0-1.216-1.02-2.228-2.313-2.228h-.5v-.5C12.188 2.825 10.328 1 8 1a4.53 4.53 0 0 0-2.941 1.1c-.757.652-1.153 1.438-1.153 2.055v.448l-.445.049C2.064 4.805 1 5.952 1 7.318 1 8.785 2.23 10 3.781 10H6a.5.5 0 0 1 0 1H3.781C1.708 11 0 9.366 0 7.318c0-1.763 1.266-3.223 2.942-3.593.143-.863.698-1.723 1.464-2.383"
                  />
                  <path
                    fill-rule="evenodd"
                    d="M7.646 4.146a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1-.708.708L8.5 5.707V14.5a.5.5 0 0 1-1 0V5.707L5.354 7.854a.5.5 0 1 1-.708-.708z"
                  />
                </svg>
                Upload file
                <input
                  type="file"
                  name="avatar"
                  id="fileInput"
                  class="clsHidden"
                  required
                />
                <!-- <input type="file" id='uploadFile1' class="hidden" /> -->
                <p class="text-xs font-medium text-gray-400 mt-2">
                  Only DOC, PDF, TXT, JPG, JPEG, PNG, GIF, and ZIP files are
                  allowed. Also make sure the file is less than 1MB
                </p>
              </label>
              <div id="filePreview" class="file-preview"></div>

              <div class="mt-4 flex justify-end">
                <button type="submit" class="library-btn">Upload</button>
                <button
                  type="button"
                  onclick="closeModal('fileModal')"
                  class="modalCancelBtn"
                >
                  Cancel
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>

    <!-- edit Modal -->
    <div id="edit-modal" class="modalStyle clsHidden edit-modal__main">
      <div class="modalDiv edit-modal__main-div">
        <div class="modalMainDiv edit-modal__main-div-cover">
          <div class="modalHeader edit-modal__header">
            <h3 class="modalFontStyle edit-modal__h3" id="edit-modal-title">
              Edit
            </h3>
            <button
              type="button"
              onclick="closeModal('edit-modal')"
              class="modalCloaseBtn"
              data-modal-hide="authentication-modal"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="30"
                height="30"
                fill="currentColor"
                class="bi bi-x"
                viewBox="0 0 16 16"
              >
                <path
                  d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708"
                />
              </svg>
              <!-- <span class="sr-only">Close modal</span> -->
            </button>
            <!-- <button class="edit-modal--close-btn" onclick="closeModal('edit-modal')">âœ–</button> -->
          </div>
          <div class="modalForm--div edit-modal__form">
            <p class="modal-note">
              Note : For File Name make sure to add the file extention at the
              end (like .png , .jpeg)
            </p>
            <form class="modalForm" id="edit-form" method="POST">
              <label for="editName" class="modalLable">Name</label>
              <input
                type="text"
                name="editName"
                id="editName"
                class="modalInput"
                required
              />
              <div class="modal-close__div">
                <button
                  type="submit"
                  class="library-btn modal-close__div--btn-ok"
                >
                  Save
                </button>
                <button
                  type="button"
                  onclick="closeModal('edit-modal')"
                  class="modal-close__div--btn-notOk modalCancelBtn"
                >
                  Cancel
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>
    <!--Share Folder Modal -->
    <div id="sharefolderModal" class="modalStyle clsHidden">
      <div class="modalDiv">
        <div class="modalMainDiv">
          <div class="modalHeader">
            <h3 class="modalFontStyle" id="share-folder-modal-title">
              Share Folder
            </h3>
            <button
              class="modalCloaseBtn"
              onclick="closeModal('sharefolderModal')"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="30"
                height="30"
                fill="currentColor"
                class="bi bi-x"
                viewBox="0 0 16 16"
              >
                <path
                  d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708"
                />
              </svg>
            </button>
          </div>
          <div class="modalForm--div">
            <form class="modalForm" id="share-folder-form" method="POST">
              <label for="shareDuration" class="modalLable">Duration</label>
              <div id="shareDurationOptions" class="radio-btns">
                <!-- Radio button options -->
                <label>
                  <input type="radio" name="shareDuration" value="30m" required />
                  30m
                </label>
                <label>
                  <input type="radio" name="shareDuration" value="1h" required />
                  1h
                </label>
                <label>
                  <input type="radio" name="shareDuration" value="10h" required />
                  10h
                </label>
                <label>
                  <input type="radio" name="shareDuration" value="1d" required />
                  1d
                </label>
                <label>
                  <input type="radio" name="shareDuration" value="10d" required />
                  10d
                </label>
              </div>
              <div class="mt-4 flex justify-end">
                <button type="submit" class="library-btn">Share</button>
                <button
                  type="button"
                  onclick="closeModal('sharefolderModal')"
                  class="modalCancelBtn"
                >
                  Cancel
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>
  </body>
  <script>
    document.addEventListener('DOMContentLoaded', () => {
      // to remove the err msg when a new file is selected
      document
        .getElementById('fileInput')
        .addEventListener('change', function () {
          const errorMessages = document.getElementById('errorMessages');
          if (errorMessages) {
            errorMessages.innerHTML = ''; // Clear the error messages when a new file is selected
          }
        });
      // file upload show in Ui
      const fileInput = document.getElementById('fileInput');
      const filePreview = document.getElementById('filePreview');

      fileInput.addEventListener('change', function () {
        const file = fileInput.files[0]; // Get the selected file
        console.log('file-obj-file upload display');
        console.log(file);
        if (file) {
          const reader = new FileReader(); // FileReader to display preview

          let fileSize;
          if (file.size >= 1048576) {
            // If size is at least 1MB
            fileSize = (file.size / 1048576).toFixed(2) + ' MB';
          } else {
            fileSize = (file.size / 1024).toFixed(2) + ' KB';
          }

          // Check if the file is an image
          if (file.type.startsWith('image/')) {
            reader.onload = function (e) {
              // Display image preview
              filePreview.innerHTML = `<div class="file-upload__div"><img class="file-upload__img" src="${e.target.result}" alt="Uploaded Image" > <p class="file-upload__p">${file.name}</p></div> <p class="file-upload__p--size">${fileSize}</p>`;
            };
            reader.readAsDataURL(file);
          } else {
            // For non-image files, display the file name
            filePreview.innerHTML = `<p class="file-upload__p"> ${file.name}</p> <p class="file-upload__p--size">${fileSize}</p>`;
          }
        }
      });

      // file upload modal
      document
        .getElementById('file-form')
        .addEventListener('submit', async function (event) {
          const currentPath = window.location.pathname; // Path only
          event.preventDefault(); // Prevent the form from submitting and reloading the page

          const form = event.target;
          const formData = new FormData(form);
          // Dynamically retrieve the action attribute
          const actionUrl = form.getAttribute('action');
          console.log('formData-here');
          console.log(formData);
          console.log('action-url');
          console.log(actionUrl);
          try {
            const response = await fetch(actionUrl, {
              method: 'POST',
              body: formData,
            });

            if (!response.ok) {
              const errorData = await response.json();
              displayErrorMessages(errorData.errors); // Display validation errors
            } else {
              closeModal('fileModal');
              // const successMessage = await response.json();
              // alert('File uploaded successfully!'); // Or handle success in another way
              window.location.href = currentPath; // Redirect manually
            }
          } catch (error) {
            console.error('Error:in the file upload', error);
          }
        });

      // drop down toggle logic
      document.querySelectorAll('.dropdownMenuIconButton').forEach((button) => {
        button.addEventListener('click', function (event) {
          event.stopPropagation(); // prevent this click event from closing the dropdown itself

          // close all the other open dropdowns

          document
            .querySelectorAll('.dropdownMenuIconButton')
            .forEach((btn) => {
              const menu = btn.nextElementSibling;
              if (
                menu &&
                !menu.classList.contains('clsHidden') &&
                menu !== button.nextElementSibling
              ) {
                menu.classList.add('clsHidden');
              }
            });

          // toggle the clicked dropdown
          const menu = button.nextElementSibling;
          if (menu) {
            menu.classList.toggle('clsHidden');
          }
        });
      });
      // stop the dropdown menuitems click event from propagating to parent elements
      document.querySelectorAll('.menu-items').forEach((item) => {
        item.addEventListener('click', function (event) {
          event.stopPropagation();

          // close the parent dropdown
          const menu = item.closest('.dropMenu');
          if (menu) {
            menu.classList.toggle('clsHidden');
          }
        });
      });

      // close dropdowns on clicking outside
      document.addEventListener('click', function (event) {
        document
          .querySelectorAll('.dropdownMenuIconButton')
          .forEach((button) => {
            const menu = button.nextElementSibling;
            if (
              menu &&
              !menu.classList.contains('clsHidden') &&
              !button.contains(event.target)
            ) {
              menu.classList.add('clsHidden');
            }
          });
      });
    });

    function displayErrorMessages(errors) {
      const errorDiv = document.getElementById('errorMessages');
      errorDiv.innerHTML = ''; // Clear any existing errors
      errors.forEach((error) => {
        const p = document.createElement('p');
        p.textContent = error.msg; // Assuming the error object has a 'msg' field
        p.style.color = 'red';
        errorDiv.appendChild(p);
      });
    }
    function openSharedModel(type , name , fid) {
      const modal = document.getElementById('sharefolderModal');
      const form = document.getElementById('share-folder-form');
      const modalTitle = document.getElementById('share-folder-modal-title');
      // implement type here to show the folder you are sharing  here 
      if ( type=='folder'){
        modalTitle.textContent = `Share Folder ${name}` ;
        form.action = `/share/folder?id=${fid}`;
      }else if (type=="file"){
        modalTitle.textContent = `Share File ${name}`;
        form.action = `/share/file?id=${fid}`;
      }
     

      //   modalTitle.textContent = `Create Folder in ${type}`;
      //   form.action = `/folder/create-folder/${id}`;
      // }
      modal.classList.remove('clsHidden');
    }

    function openFolderModal(modalId, type, id) {
      const modal = document.getElementById('folderModal');
      const form = document.getElementById('folder-form');
      const modalTitle = document.getElementById('folder-modal-title');
      if (type == 'library') {
        modalTitle.textContent = ' Create Folder in My library ';
        form.action = `/library/create-folder/${id}`;
      } else {
        modalTitle.textContent = `Create Folder in ${type}`;
        form.action = `/folder/create-folder/${id}`;
      }
      modal.classList.remove('clsHidden');
    }
    function openMenu() {
      const menu = document.getElementById('menu-small');
      menu.classList.toggle('clsHidden-nav');
    }
    function openFileModal(modalId, type, id) {
      const modal = document.getElementById('fileModal');
      const form = document.getElementById('file-form');
      const modalTitle = document.getElementById('file-modal-title');
      if (type == 'library') {
        modalTitle.textContent = 'Upload File to My library ';
        form.action = `/library/upload-file/${id}`;
      } else {
        modalTitle.textContent = `Upload File to  ${type}`;
        form.action = `/folder/upload-file/${id}`;
      }
      modal.classList.remove('clsHidden');
    }

    // function closeModal(modalId) {
    //   document.getElementById(modalId).classList.add('clsHidden');
    // }
    function closeModal(modalId) {
      const modal = document.getElementById(modalId);

      // Hide the modal
      modal.classList.add('clsHidden');

      // Reset the form if it exists within the modal
      const form = modal.querySelector('form');
      if (form) {
        form.reset();
      }

      // Clear the file preview if it exists
      const filePreview = modal.querySelector('#filePreview');
      if (filePreview) {
        filePreview.innerHTML = '';
      }

      // Clear any error messages if they exist
      const errorMessages = modal.querySelector('#errorMessages');
      if (errorMessages) {
        errorMessages.innerHTML = '';
      }
    }

    function openEditModal(type, id, name) {
      console.log('called me');
      const modal = document.getElementById('edit-modal');
      const form = document.getElementById('edit-form');
      const nameInput = document.getElementById('editName');
      const modalTitle = document.getElementById('edit-modal-title');

      // Set the form's action URL based on the type (folder or file)
      if (type === 'folder') {
        form.action = `/folder/edit/${id}`;
        modalTitle.textContent = 'Rename Folder';
      } else if (type === 'file') {
        form.action = `/file/edit/${id}`;
        modalTitle.textContent = 'Rename File';
      }

      nameInput.value = name;

      // Show the modal
      modal.classList.remove('clsHidden');
    }

    async function sendDeleteReq(type, id, path) {
      const currentPath = window.location.pathname; // Path only
      console.log('got the req');
      let url = '';
      if (type === 'folder') {
        url = `/folder/delete/${id}`;
        try {
          const response = await fetch(url, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ id }),
          });

          if (!response.ok) {
            throw new Error('Network response was not ok');
          }

          console.log('Success:');
          console.log('got the req success');
          window.location.href = currentPath; // Redirect manually
        } catch (error) {
          console.log('got the req erre');
          console.error('Error:', error);
          window.location.href = currentPath; // Redirect manually
        }
      } else {
        url = `/file/delete/${id}`;
        try {
          const response = await fetch(url, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ id, path }),
          });

          if (!response.ok) {
            throw new Error('Network response was not ok');
          }

          console.log('Success:');
          console.log('got the req success');
          window.location.href = currentPath; // Redirect manually
        } catch (error) {
          console.log('got the req erre');
          console.error('Error:', error);
          window.location.href = currentPath; // Redirect manually
        }
      }
    }

    async function downloadFile(fileName, path) {
      const currentPath = window.location.pathname; // Path only
      console.log('got the req');
      const url = '/file/download';

      try {
        const response = await fetch(url, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ fileName, path }),
        });

        if (!response.ok) {
          throw new Error('Network response was not ok');
        }

        // Get the file as a Blob
        const fileBlob = await response.blob();

        // Create a blob URL in the client-side
        const blobUrl = URL.createObjectURL(fileBlob);

        // Create a link element to trigger the download
        const a = document.createElement('a');
        a.href = blobUrl;
        a.download = fileName; // This will set the downloaded file's name
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);

        // Clean up the blob URL after download
        URL.revokeObjectURL(blobUrl);

        console.log('Download successful!');
      } catch (error) {
        console.error('Error downloading the file:', error);
      }
    }
  </script>
</html>
