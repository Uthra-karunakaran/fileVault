// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String 
  expiresAt DateTime
}
model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  libraryId Int?      @unique
  library   Library?  @relation(fields: [libraryId], references: [id]) //(one(user) to one(lib))
  demo      Boolean   @default(false)
}
// here only the User table will have the libraryId , the Library table wont have the userId at the time of creation 
// but it is okay 
model Library {
  id       Int      @id @default(autoincrement())
  userId   Int?      @unique
  user     User?     @relation  //(one(user) to one(lib))
  folders  Folder[]
  files    File[]
}

model Folder {
  id              Int      @id @default(autoincrement())       
  folderName      String                                    
  libraryId       Int?                                      // Optional foreign key to the Library model
  library         Library? @relation(fields: [libraryId], references: [id] , onDelete: Cascade) // Optional relation to the Library model
  createdAt       DateTime @default(now())                 
  updatedAt       DateTime @updatedAt                      
  parentFolderId  Int?                                      // Optional foreign key to the parent folder
  parentFolder    Folder?  @relation("ParentChildFolders", fields: [parentFolderId], references: [id]) // Self-relation to the parent folder
  childFolders    Folder[] @relation("ParentChildFolders")   // Relation to child folders
  files           File[]                                    // Relation to files in the folder (one(folder) to many(files))
  sharedLinks     SharedLink[]                              // Relation to SharedLink
}
// remembe the top level folders won't have a parentFolderId 
// only the nested folders have the parentFolderId
model File {
  id         Int      @id @default(autoincrement())
  fileName   String
  filePath   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt // Default to current time when created and update on every change
  folderId   Int?
  folder     Folder?  @relation(fields: [folderId], references: [id] , onDelete: Cascade) // (one(folder) to many(files))
  libraryId  Int?
  library    Library? @relation(fields: [libraryId], references: [id])
  size       Float    @default(0.0) // Default size to 0.0
  sharedLinks     SharedLink[]                              // Relation to SharedLink
}

model SharedLink {
  id             String    @id @default(uuid())             // UUID used directly in the link (key)
  folderId       Int?                                       // Optional Foreign key to the Folder model
  fileId         Int?                                       // Optional Foreign key to the File model
  folder         Folder?   @relation(fields: [folderId], references: [id], onDelete: Cascade) // Link associated with a folder
  file           File?     @relation(fields: [fileId], references: [id], onDelete: Cascade)   // Link associated with a file
  expirationDate DateTime                                  // Expiration date for the link
  createdAt      DateTime @default(now())                  // Timestamp when the link is created
}

